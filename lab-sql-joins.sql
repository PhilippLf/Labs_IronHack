USE sakila;

# 1. List the number of films per category.
SELECT category.name, COUNT(film_id)
FROM category
JOIN film_category
USING(category_id)
GROUP BY category.name;

# 2. Retrieve the store ID, city, and country for each store.
SELECT store_id, city, country
FROM store
	JOIN address
	USING (address_id)
	JOIN city
	USING (city_id)
	JOIN country
	USING (country_id);

# 3. Calculate the total revenue generated by each store in dollars.
SELECT store_id, SUM(amount) AS total_revenue
FROM store
	JOIN staff
	USING(store_id)
    JOIN payment
    USING(staff_id)
GROUP BY store_id;

# 4. Determine the average running time of films for each category.
SELECT category.name, AVG(length) AS avg_running_time
FROM category
	JOIN film_category
    USING(category_id)
    JOIN film
    USING (film_id)
GROUP BY category.name;

# 5. Identify the film categories with the longest average running time.
SELECT category.name, AVG(length) AS avg_running_time
FROM category
	JOIN film_category
    USING(category_id)
    JOIN film
    USING (film_id)
GROUP BY category.name
ORDER BY avg_running_time DESC;

# 6. Display the top 10 most frequently rented movies in descending order.
SELECT title, COUNT(rental_id) as rent_frequency
FROM film
	JOIN inventory
    USING(film_id)
    JOIN rental
    USING(inventory_id)
GROUP BY title
ORDER BY rent_frequency DESC
LIMIT 10;

# 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT
	store_id,
	title,
    IFNULL(return_date, 'Not Available')
FROM inventory
	JOIN film
    USING(film_id)
    RIGHT JOIN rental
    USING(inventory_id)
WHERE store_id = 1 AND title = 'ACADEMY DINOSAUR';

# 8. Provide a list of all distinct film titles, along with their availability status in the inventory.
# Include a column indicating whether each title is 'Available' or 'NOT available.'
# Note that there are 42 titles that are not in the inventory,
# and this information can be obtained using a CASE statement combined with IFNULL."
SELECT
	DISTINCT(title),
	CASE
		WHEN return_date IS NULL
        THEN 'NOT Available'
		ELSE 'Available'
	END AS availability_status
FROM film
    JOIN inventory
    USING(film_id)
    RIGHT JOIN rental
    USING(inventory_id);
    
#SELECT COUNT(inventory_id) FROM inventory;

#SELECT COUNT(inventory_id) FROM rental;

#SELECT COUNT(inventory_id)
#FROM inventory;
#SELECT COUNT(inventory_id)
#FROM rental
#WHERE return_date IS NULL;